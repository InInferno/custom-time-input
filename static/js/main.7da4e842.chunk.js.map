{"version":3,"sources":["components/TimeInput/TimeInput.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["TimeInput","value","Date","format","onChange","months","useState","inputMode","setInputMode","inputText","setInputText","positions","setPositions","timeString","setTimeString","undefined","focus","setFocus","ref","useRef","keyPress","e","key","stopInput","preventDefault","Object","keys","forEach","verbal","start","current","selectionStart","end","newValue","offset","setFullYear","getFullYear","ctrlKey","setMonth","getMonth","daysInMonth","getDate","setDate","setHours","getHours","setMinutes","getMinutes","setSeconds","getSeconds","console","log","toString","useEffect","pos","temp","values","val","padStart","i","length","replace","data","setSelectionRange","type","onClick","onKeyDown","target","onBlur","style","width","App","date","time","setTime","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7da4e842.chunk.js","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport { useState, useRef, useEffect } from 'react';\r\n\r\nconst TimeInput = ({value = new Date(), format = '%D/%M/%Y %h:%m:%s', onChange = () => {} }) => {\r\n\r\n/**\r\n * @param {Date} value Объект даты, переданный из родительского компонента\r\n * @param {string} format Формат отображения даты\r\n * Доступные поля:\r\n * %Y - Год\r\n * %M - Месяц\r\n * %D - День\r\n * %h - Час\r\n * %m - Минуты\r\n * %s - Секунды\r\n * Между каждым полем должен быть разделительный символ\r\n * @param {function} onChange Функция для передачи изменённого объекта даты родительскому компоненту\r\n*/\r\n\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    const [inputMode, setInputMode] = useState(false);\r\n    const [inputText, setInputText] = useState('');\r\n\r\n    const [positions, setPositions] = useState({});\r\n    const [timeString, setTimeString] = useState('');\r\n    const [focus, setFocus] = useState(undefined);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let pos = {}\r\n        let temp = format;\r\n\r\n        const values = {\r\n            '%Y': {\r\n                val: value.getFullYear().toString(),\r\n                verbal: 'year'\r\n            },\r\n            '%M': {\r\n                val: months[value.getMonth()],\r\n                verbal: 'month'\r\n            },\r\n            '%D': {\r\n                val: value.getDate().toString().padStart(2, '0'),\r\n                verbal: 'date'\r\n            },\r\n            '%h': {\r\n                val: value.getHours().toString().padStart(2, '0'),\r\n                verbal: 'hours'\r\n            },\r\n            '%m': {\r\n                val: value.getMinutes().toString().padStart(2, '0'),\r\n                verbal: 'minutes'\r\n            },\r\n            '%s': {\r\n                val: value.getSeconds().toString().padStart(2, '0'),\r\n                verbal: 'seconds'\r\n            }\r\n        }\r\n\r\n        let i = 0;\r\n\r\n        while (i < temp.length) {\r\n            if (temp[i] === '%') {\r\n                if (temp[i + 1] === '%') temp = temp.replace('%%', '%');\r\n                else {\r\n                    if (values[`%${temp[i + 1]}`] !== undefined) {\r\n                        let data = values[`%${temp[i + 1]}`];\r\n                        pos[data.verbal] = {\r\n                            start: i,\r\n                            end: i + data.val.length\r\n                        };\r\n                        temp = temp.replace(`%${temp[i + 1]}`, data.val);\r\n                    }\r\n                }\r\n            }\r\n\r\n            i++;\r\n        }\r\n\r\n        setPositions(pos);\r\n        setTimeString(temp);    \r\n    }, [value, format]);\r\n\r\n    useEffect(() => {\r\n        if (focus !== undefined) \r\n            ref.current.setSelectionRange(positions[focus].start, positions[focus].end);\r\n    }, [timeString, focus]);\r\n\r\n    function keyPress(e) {\r\n        if (inputMode) {\r\n            if (e.key === 'Enter') stopInput();\r\n            return;\r\n        }\r\n\r\n        if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n\r\n            // Проверка какое поле пользователь пытается изменить\r\n            Object.keys(positions).forEach((verbal) => {\r\n                if (positions[verbal].start <= ref.current.selectionStart && \r\n                    positions[verbal].end >= ref.current.selectionStart) {\r\n                    setFocus(verbal);\r\n\r\n                    // Создание нового объекта для ререндера\r\n                    const newValue = new Date(value);\r\n                    const offset = (e.key === 'ArrowUp' ? 1 : -1)\r\n\r\n                    switch (verbal) {\r\n                        case 'year':\r\n                            newValue.setFullYear(value.getFullYear() + offset);\r\n                            break;\r\n                        case 'month':\r\n                            if (e.ctrlKey) newValue.setMonth(value.getMonth() + offset);\r\n                            else newValue.setMonth((12 + value.getMonth() + offset) % 12);\r\n                            break;\r\n                        case 'date':\r\n                            // Получение дней в месяце\r\n                            const daysInMonth = new Date(value.getFullYear(), value.getMonth() + 1, 0).getDate();\r\n\r\n                            if (e.ctrlKey) newValue.setDate(value.getDate() + offset);\r\n                            else newValue.setDate((daysInMonth + value.getDate() - 1 + offset) % daysInMonth + 1);\r\n                            break;\r\n                        case 'hours':\r\n                            if (e.ctrlKey) newValue.setHours(value.getHours() + offset);\r\n                            else newValue.setHours((24 + value.getHours() + offset) % 24);\r\n                            break;\r\n                        case 'minutes':\r\n                            if (e.ctrlKey) newValue.setMinutes(value.getMinutes() + offset);\r\n                            else newValue.setMinutes((60 + value.getMinutes() + offset) % 60);\r\n                            break;\r\n                        case 'seconds':\r\n                            if (e.ctrlKey) newValue.setSeconds(value.getSeconds() + offset);\r\n                            else newValue.setSeconds((60 + value.getSeconds() + offset) % 60);\r\n                            break;\r\n                        default: \r\n                            break;\r\n                    }\r\n                    \r\n                    // Возвращение объекта\r\n                    onChange(newValue);\r\n                }\r\n            });\r\n        } else {\r\n            setFocus(undefined);\r\n        }\r\n\r\n        if (e.key === 'Backspace') setInputMode(true);\r\n    }\r\n\r\n    function onInput(e) {\r\n        if (inputMode) setInputText(e.target.value);\r\n    }\r\n\r\n    function stopInput(e) {\r\n        if (inputMode) {\r\n            const newValue = new Date(inputText);\r\n            console.log(newValue);\r\n            if (newValue.toString() !== 'Invalid Date') onChange(newValue);\r\n            setInputMode(false);\r\n            setInputText('');\r\n        }\r\n    }\r\n\r\n    return <input\r\n        type=\"text\" \r\n        value={(inputMode ? inputText : timeString)}\r\n        onClick={keyPress}\r\n        onKeyDown={keyPress}\r\n        onChange={onInput}\r\n        onBlur={stopInput}\r\n        ref={ref}\r\n        style={{width: '200px'}}\r\n    />\r\n}\r\n\r\nexport default TimeInput;\r\n","import React, { useState } from 'react';\nimport TimeInput from '../TimeInput/TimeInput';\nimport './app.css';\n\nconst App = () => {\n\n  const date = new Date(2021, 0, 1, 13, 13, 0);\n  const [time, setTime] = useState(date);\n\n  return (\n    <div className=\"App\">\n        <h1>Custom Time Input</h1>\n        <TimeInput \n          value={time} \n          onChange={setTime}\n        />\n        <p>{time.toString()}</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}